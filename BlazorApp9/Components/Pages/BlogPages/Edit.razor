@page "/Blogs/edit"
@inject BlazorApp9.Data.BlazorApp9Context DB
@using BlazorApp9
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>PRAKTYKI</h4>
<hr />
@if (Blog is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Blog" OnValidSubmit="UpdateBlog" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Blog.Id" value="@Blog.Id" />
                <div class="mb-3">
                    <label for="DATA" class="form-label">DATA</label>
                    <InputText id="DATA" @bind-Value="Blog.Name" class="form-control" />
                    <ValidationMessage For="() => Blog.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="TEMAT" class="form-label">TEMAT</label>
                    <InputText id="TEMAT" @bind-Value="Blog.Description" class="form-control" />
                    <ValidationMessage For="() => Blog.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="GODZINA OD" class="form-label">GODZINA OD</label>
                    <InputText id="GODZINA OD" @bind-Value="Blog.Author" class="form-control" />
                    <ValidationMessage For="() => Blog.Author" class="text-danger" />
                </div> 
                <div class="mb-3">
                    <label for="GODZINA DO" class="form-label">GODZINA DO</label>
                    <InputText id="GODZINA DO" @bind-Value="Blog.Author" class="form-control" />
                    <ValidationMessage For="() => Blog.Author" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/blogs">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Blog? Blog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Blog ??= await DB.Blog.FirstOrDefaultAsync(m => m.Id == Id);

        if (Blog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateBlog()
    {
        DB.Attach(Blog!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BlogExists(Blog!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/blogs");
    }

    bool BlogExists(int id)
    {
        return DB.Blog.Any(e => e.Id == id);
    }
}
